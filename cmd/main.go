package main

import (
	"io"
	"log"
	"os"
	"project_mobile/app/database/postgres"
	"project_mobile/app/internals/api"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
	_ "project_mobile/docs"                    // docs generated by Swag CLI
)

// @title User project_mobile API
// @version 1.0
// @description API для обогащения пользовательских данных (возраст, пол, национальность)
// @termsOfService http://swagger.io/terms/
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
func main() {
	router := gin.Default()

	f, _ := os.Create("gin.log")
	gin.DefaultWriter = io.MultiWriter(f)

	pg, err := postgres.NewPostgres()
	if err != nil {
		log.Fatal(err)
	}

	err = pg.MigrationsUp()
	if err := pg.MigrationsUp(); err.Error() != "no change" {
		log.Fatalf("Migration create was failed: %v", err)
	}

	router.POST("/create_user", api.CreateUser)
	router.PUT("/update_user", api.UpdateUser)
	router.DELETE("/delete_user", api.DeleteUser)

	router.GET("/get_users", api.GetUsers)
	router.GET("/get_users_by_filter", api.GetUsersFilter)

	// Добавляем Swagger UI
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.Run()
}
